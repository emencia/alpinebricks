var $knobRing=function(t){"use strict";class s extends HTMLElement{setReady=t=>null;isReady=new Promise((t=>this.setReady));constructor(){super(),this.attachShadow({mode:"open"})}static get observedAttributes(){return["progress","color","bg"]}connectedCallback(){this._id=this.getAttribute("id")??"",this._stroke=this.getAttribute("stroke")??8,this._radius=this.getAttribute("radius");const t=this.getAttribute("progress");this._strokeColor=this.getAttribute("color")??"green",this._progress=t,this._bgColor=this.getAttribute("bg")??"lightgray",this._normalizedRadius=this._radius-2*this._stroke,this._circumference=2*this._normalizedRadius*Math.PI,this.ids={main:"knob-"+this._id,bg:"knob-background-"+this._id,ov:"knob-overlay-"+this.id,txt:"knob-text-"+this.id},this.shadowRoot.innerHTML=`\n        <svg      \n          id="${this.ids.main}"    \n          height="${2*this._radius}"\n          width="${2*this._radius}"\n         >\n          <circle\n              id="${this.ids.bg}"\n              class="knob-background"\n              stroke="${this._bgColor}"\n              stroke-dasharray="0"\n              style="stroke-dashoffset:100"\n              stroke-width="${this._stroke}"\n              fill="transparent"\n              r="${this._normalizedRadius}"\n              cx="${this._radius}"\n              cy="${this._radius}"\n            />\n           <circle\n             id="${this.ids.ov}"\n             class="knob-overlay"\n             stroke="${this._strokeColor}"\n             stroke-dasharray="${this._circumference} ${this._circumference}"\n             style="stroke-dashoffset:${this._circumference}"\n             stroke-width="${this._stroke}"\n             fill="transparent"\n             r="${this._normalizedRadius}"\n             cx="${this._radius}"\n             cy="${this._radius}"\n          />\n          <text \n            id="${this.ids.txt}"\n            class="knob-text"\n            x="${parseFloat(this._radius)-40}" \n            y="${parseFloat(this._radius)+10}" \n            fill="${this._strokeColor}"\n            >${this._progress} %</text>\n        </svg>\n        <style>\n          #${this.ids.ov} {\n            transition: stroke-dashoffset 0.35s;\n            transform: rotate(-90deg);\n            transform-origin: 50% 50%;\n          }\n          #${this.ids.txt} {\n            font-size:250%\n          }\n        </style>\n      `,this.setReady(!0)}setProgress(t){const s=this._circumference-t/100*this._circumference;this.shadowRoot.querySelector(`#${this.ids.ov}`).style.strokeDashoffset=s;this.shadowRoot.querySelector(`#${this.ids.txt}`).innerHTML=t+" %"}setColor(t){this.shadowRoot.querySelector(`#${this.ids.ov}`).style.stroke=t;this.shadowRoot.querySelector(`#${this.ids.txt}`).style.fill=t}setBgColor(t){this.shadowRoot.querySelector(`#${this.ids.bg}`).style.stroke=t}attributeChangedCallback(t,s,e){1==this.isConnected&&this.isReady.then((()=>{"progress"===t?this.setProgress(e):"color"===t?this.setColor(e):"bg"===t&&this.setBgColor(e)}))}}return window.customElements.define("knob-ring",s),t.create=function(t={progress:0,color:"green",bg:"lightgrey"}){return Alpine.store("knobRing",{progress:t.progress,bg:t.bg,init(){var s;t.colorFunc&&(this.color=t.colorFunc(null!==(s=t.progress)&&void 0!==s?s:0))},animate(t){this.sleep(10).then((()=>this.update(t)))},update(s){this.progress=s,t.colorFunc&&(this.color=t.colorFunc(s))},increment(t=1){this.progress<=100-t?this.update(this.progress+t):console.warn("Can not increment: progress would be over 100")},decrement(t=1){this.progress-t>=0?this.update(this.progress-t):console.warn("Can not decrement: progress would be under 0")},sleep:(t=1e3)=>new Promise((s=>setTimeout(s,t)))}),Alpine.store("knobRing")},Object.defineProperty(t,"__esModule",{value:!0}),t}({});
