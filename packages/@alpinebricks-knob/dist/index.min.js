var $knobRing=function(s){"use strict";var t;class e extends HTMLElement{setReady=s=>null;isReady=new Promise((s=>{t=s}));constructor(){super(),this.attachShadow({mode:"open"})}static get observedAttributes(){return["progress","color","bg"]}connectedCallback(){this._id=this.getAttribute("id")??"",this._stroke=this.getAttribute("stroke")??8,this._radius=this.getAttribute("radius");const s=this.getAttribute("progress");this._strokeColor=this.getAttribute("color")??"green",this._progress=s,this._bgColor=this.getAttribute("bg")??"lightgray",this._normalizedRadius=this._radius-2*this._stroke,this._circumference=2*this._normalizedRadius*Math.PI,this.ids={main:"knob-"+this._id,bg:"knob-background-"+this._id,ov:"knob-overlay-"+this.id,txt:"knob-text-"+this.id},this.shadowRoot.innerHTML=`\n        <svg      \n          id="${this.ids.main}"    \n          height="${2*this._radius}"\n          width="${2*this._radius}"\n         >\n          <circle\n              id="${this.ids.bg}"\n              class="knob-background"\n              stroke="${this._bgColor}"\n              stroke-dasharray="0"\n              style="stroke-dashoffset:100"\n              stroke-width="${this._stroke}"\n              fill="transparent"\n              r="${this._normalizedRadius}"\n              cx="${this._radius}"\n              cy="${this._radius}"\n            />\n           <circle\n             id="${this.ids.ov}"\n             class="knob-overlay"\n             stroke="${this._strokeColor}"\n             stroke-dasharray="${this._circumference} ${this._circumference}"\n             style="stroke-dashoffset:${this._circumference}"\n             stroke-width="${this._stroke}"\n             fill="transparent"\n             r="${this._normalizedRadius}"\n             cx="${this._radius}"\n             cy="${this._radius}"\n          />\n          <text \n            id="${this.ids.txt}"\n            class="knob-text"\n            x="${parseFloat(this._radius)-40}" \n            y="${parseFloat(this._radius)+10}" \n            fill="${this._strokeColor}"\n            >${this._progress} %</text>\n        </svg>\n        <style>\n          #${this.ids.ov} {\n            transition: stroke-dashoffset 0.35s;\n            transform: rotate(-90deg);\n            transform-origin: 50% 50%;\n          }\n          #${this.ids.txt} {\n            font-size:250%\n          }\n        </style>\n      `,this.setProgress(this._progress),t(!0)}setProgress(s){const t=this._circumference-s/100*this._circumference;this.shadowRoot.querySelector(`#${this.ids.ov}`).style.strokeDashoffset=t;this.shadowRoot.querySelector(`#${this.ids.txt}`).innerHTML=s+" %"}setColor(s){this.shadowRoot.querySelector(`#${this.ids.ov}`).style.stroke=s;this.shadowRoot.querySelector(`#${this.ids.txt}`).style.fill=s}setBgColor(s){this.shadowRoot.querySelector(`#${this.ids.bg}`).style.stroke=s}attributeChangedCallback(s,t,e){1==this.isConnected&&this.isReady.then((()=>{"progress"===s?this.setProgress(e):"color"===s?this.setColor(e):"bg"===s&&this.setBgColor(e)}))}}return window.customElements.define("knob-ring",e),s.create=function(s){return Alpine.store("knobRing",{progress:s.progress,bg:s.bg,init(){var t,e,i;this.progress=null!==(t=null==s?void 0:s.progress)&&void 0!==t?t:0,this.bg=null!==(e=null==s?void 0:s.bg)&&void 0!==e?e:"lightgrey",this.color=null!==(i=null==s?void 0:s.color)&&void 0!==i?i:"green",s.colorFunc&&(this.color=s.colorFunc(this.progress))},animate(s){this.sleep(10).then((()=>this.update(s)))},update(t){this.progress=t,s.colorFunc&&(this.color=s.colorFunc(t))},increment(s=1){this.progress<=100-s?this.update(this.progress+s):console.warn("Can not increment: progress would be over 100")},decrement(s=1){this.progress-s>=0?this.update(this.progress-s):console.warn("Can not decrement: progress would be under 0")},sleep:(s=1e3)=>new Promise((t=>setTimeout(t,s)))}),Alpine.store("knobRing")},Object.defineProperty(s,"__esModule",{value:!0}),s}({});
