
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var $dataTable = (function (exports) {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    class CaretSorter extends HTMLElement {
      sortedUp = false;
      sortedDown = false;
      col = "";
      constructor() {
        super();
        this.attachShadow({ mode: 'open' });
      }

      static get observedAttributes() {
        return ['state'];
      }

      connectedCallback() {
        const state = this.getAttribute('state');
        this.col = this.getAttribute('col');
        console.log("STATE", state);
        const carretDown = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" width="0.63em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 320 512">
      <path fill="${this.sortedUp ? 'red' : 'currentColor'}" d="M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"/>
    </svg>`;
        const carretUp = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" width="0.63em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 320 512">
      <path fill="${this.sortedDown ? 'red' : 'currentColor'}" d="M288.662 352H31.338c-17.818 0-26.741-21.543-14.142-34.142l128.662-128.662c7.81-7.81 20.474-7.81 28.284 0l128.662 128.662c12.6 12.599 3.676 34.142-14.142 34.142z"/>
    </svg>`;
        this.shadowRoot.innerHTML = `<div>${carretUp}<br />${carretDown}</div>`;
      }

      attributeChangedCallback(name, oldValue, newValue) {
        if (this.isConnected != true) { return }
        if (name === 'state') {
          const val = JSON.parse(decodeURIComponent(newValue));
          console.log("NEW STATE", val);
          let _sortedUp = false;
          let _sortedDown = false;
          if (val.col == this.col) {
            if (val.mode == "asc") {
              _sortedUp = true;
            } else {
              _sortedDown = true;
            }
          }
          this.sortedUp = _sortedUp;
          this.sortedDown = _sortedDown;
          console.log("SORT", this.sortedUp, this.sortedDown);
        }
      }
    }

    function create(isDebug = false) {
        Alpine.store('datatable', {
            isLoading: false,
            isReady: false,
            sorted: { col: "", mode: "asc" },
            dataset: [],
            get sortedState() {
                return encodeURIComponent(JSON.stringify(this.sorted));
            },
            sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            },
            loadData(url, delay) {
                return __awaiter(this, void 0, void 0, function* () {
                    if (this.isLoading) {
                        if (isDebug) {
                            console.log("Already loading data");
                        }
                        return;
                    }
                    this.isLoading = true;
                    if (isDebug) {
                        console.log("Loading data");
                    }
                    if (delay) {
                        yield this.sleep(delay);
                    }
                    const opts = {
                        method: "GET",
                        headers: { "Content-Type": "application/json" }
                    };
                    const response = yield fetch(url, opts);
                    if (!response.ok) {
                        throw new Error(`Error: ${response}`);
                    }
                    this.dataset = (yield response.json());
                    this.isLoading = false;
                    this.isReady = true;
                });
            },
            _toggleSort(col, mode = "asc") {
            },
            sort(col, mode = "asc") {
                if (mode == "asc") {
                    this.dataset.sort(function (a, b) {
                        const nameA = a[col];
                        const nameB = b[col];
                        if (nameA < nameB) {
                            return -1;
                        }
                        if (nameA > nameB) {
                            return 1;
                        }
                        return 0;
                    });
                }
                else {
                    this.dataset.sort(function (a, b) {
                        const nameA = a[col];
                        const nameB = b[col];
                        if (nameB < nameA) {
                            return -1;
                        }
                        if (nameB > nameA) {
                            return 1;
                        }
                        return 0;
                    });
                }
            },
        });
        return Alpine.store("datatable");
    }
    window.customElements.define('caret-sorter', CaretSorter);

    exports.create = create;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({});
